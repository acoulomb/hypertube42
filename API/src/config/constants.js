const RESPONSES = {
  CLIENT: {
    UNEXIST: { CLIENT_UNEXIST: 'Client unexist' },
  },
  MAIL: {
    FAIL: { MAIL_FAIL: 'Failed to send message' },
    EXIST: { MAIL_EXIST: 'Email already used in database' },
  },
  BDD: {
    FAILED: { FAILED: 'Fail to interact with db' },
  },
  USER: {
    ALREADY_EXIST: { ALREADY_EXIST: 'User already exist' },
    ALREADY_CONFIRM: { ALREADY_CONFIRM: 'User already confirmed' },
    UNEXIST: { UNEXIST: 'User unexist' },
    BAD_PASS: { USER_BAD_PASS: 'Bad user password' },
    NOT_ACTIVATED: { USER_NOT_ACTIVATED: 'Your account has not been activated yet' },
  },
  INVALID: {
    USERNAME: { INVALID_USERNAME: 'Invalid username' },
    FIRSTNAME: { INVALID_FIRSTNAME: 'Invalid firstname' },
    LASTNAME: { INVALID_LASTNAME: 'Invalid lastname' },
    MAIL: { INVALID_MAIL: 'Invalid mail' },
    PASSWORD: { INVALID_PASSWORD: 'Invalid password' },
    AUTH_HEADER: { INVALID_AUTH_HEADER: 'Invalid auth header' },
    COMMENT_LENGTH: { INVALID_COMMENT_LENGTH: 'Your comment is too loooooong' },
  },
  MISSING: {
    FILE: { FILE_MISSING: 'No file has been uploaded' },
    PAGE: { NON_EXISTING_PAGE: 'Non existing page called' },
    BEARER: { MISSING_BEARER: 'No bearer token' },
    DATA: { MISSING_DATA: 'One or more arguments are missing. Please check the documentation.' },
  },
  INCORRECT: {
    PASSWORD: 'You\'ve entered a wrong password',
  },
  TOKEN: {
    EXPIRED: { TOKEN_EXPIRED: 'Your token has expired' },
    WRONG_ACCESS_TOKEN: data => ({ WRONG_ACCESS_TOKEN: `No record found from AccessToken with accessToken::${data}` }),
    WRONG_MOVIE_TOKEN: data => ({ WRONG_MOVIE_TOKEN: `No record found from MovieToken with movieToken::${data}` }),
  },
  WATCHLIST: {
    EXIST: { ALREADY_IN_WATCHLIST: 'This movie is already in the watchlist' },
    NO_MATCH: { NOT_IN_WATCHLIST: 'No matching movie in the user watchlist' },
  },
  MOVIE: {
    UNEXIST: { MOVIE_UNEXIST: 'This movie was not found' },
  },
  TORRENT: {
    NON_ACTIVE: { NON_ACTIVE_TORRENT: 'Non active torrent' },
    WRONG_STATUS: { WRONG_STATUS_TORRENT: 'Torrent with wrong status' },
    MISSING_TORRENT_HASH: { MISSING_TORRENT_HASH: 'Missing torrent hash' },
    NOT_FOUND: { NO_TORRENT_FOUND: 'No torrent has been found' },
    TOO_MANY: { MULTIPLE_TORRENTS: 'Multiple torrents found with same hash' },
    FFMPEG_ERROR: data => ({ FFMPEG_ERROR: `An error occured while using ffmpeg: ${data}` }),
    INDEX: { WRONG_TORRENT_INDEX: 'Wrong torrent index' },
    UPLOAD: data => ({ UPLOAD_ISSUE: 'An error occured while uploading the torrent for streaming', data }),
  },
  MIDDLEWARE_ERRORS: {
    MISSING_REDIRECT_URI: { MISSING_REDIRECT_URI: 'RedirectUri is missing' },
    MISSING_CLIENT_ID: { MISSING_CLIENT_ID: 'Client_id is missing' },
    MISSING_CODE: { MISSING_CODE: 'code is missing' },
    MISSING_PROVIDER: { MISSING_PROVIDER: 'provider is missing' },
    MISSING_CLIENT_SECRET: { MISSING_CLIENT_SECRET: 'Client_secret is missing' },
    MISSING_RESPONSE_TYPE: { MISSING_RESPONSE_TYPE: 'Response_type is missing' },
    MISSING_USER_PASS: { MISSING_USER_PASS: 'Missing username or password in body request' },
    MISSING_SCOPE: { MISSING_SCOPE: 'scope is missing' },
    INCORRECT_RESPONSE_TYPE: { INCORRECT_RESPONSE_TYPE: 'Response_type allowed value are code' },
    INCORRECT_REDIRECT_URI: { INCORRECT_REDIRECT_URI: 'Incorrect redirect_uri given' },
    INCORRECT_PROVIDER: { INCORRECT_PROVIDER: 'Incorrect provider given' },
    AUTH_HEADER_CORRUPTED: { AUTH_HEADER_CORRUPTED: 'Authorization headers is corrupted' },
    AUTH_HEADER_VALUE_CORRUPTED: { AUTH_HEADER_VALUE_CORRUPTED: 'Authorization headers value is corrupted' },
    BASIC_AUTH_VALUE_CORRUPTED: { BASIC_AUTH_VALUE_CORRUPTED: 'Basic Authorization headers value is corrupted' },
    UNHANDLE_AUTH: { UNHANDLE_AUTH: 'Unsupported authorization headers' },
    BAD_SECRET_CLIENT: { BAD_SECRET_CLIENT: 'Bad client secret' },
    FORBIDDEN_CLIENT_SECRET: { FORBIDDEN_CLIENT_SECRET: 'You shouldn\'t pass your client secret key' },
    INCORRECT_GRANT_TYPE: { INCORRECT_GRANT_TYPE: 'Incorrect grant type' },
    INCORRECT_SCOPE: (s = '') => ({ INCORRECT_SCOPE: `Incorrect scope ${s}` }),
    UNEXIST_OAUTH_CLIENT: { UNEXIST_OAUTH_CLIENT: 'Unexist client' },
    UNHANDLERESPONSE_TYPE: val => ({ UNHANDLERESPONSE_TYPE: `Unhandle response_type: ${val}` }),
  },
  BDD_ERRORS: {
    FAILED: { FAILED: 'Fail to interact with db' },
  },
  ERRORS: {
    AUTH_CREDENTIALS: { AUTH_CREDENTIALS: 'Credentials are invalid.' },
    GENERAL: { GENERAL: 'An error occured. Please try again later.' },
    DATA_MISSING: { DATA_MISSING: 'One or more arguments are missing. Please check the documentation.' },
    PAGE_NOT_FOUND: { PAGE_NOT_FOUND: 'Page not found' },
    INVALID_ID: { INVALID_ID: 'Id with an invalid type' },
    NO_USER: { NO_USER: 'No user found...' },
    DATA_VALIDATION: { DATA_VALIDATION: 'Data validation failed' },
    EXISTING_USER: { EXISTING_USER: 'A user with same username or email already exist' },
    INVALID_TOKEN: { INVALID_TOKEN: 'Token is invalid' },
    ACCOUNT_ACTIVATED: { ACCOUNT_ACTIVATED: 'Your account has already been activated' },
    ACCOUNT_NOT_ACTIVATED: { ACCOUNT_NOT_ACTIVATED: 'Your account has not been activated yet' },
    FILE_MISSING: { FILE_MISSING: 'No file has been uploaded' },
    WRONG_FILE: { WRONG_FILE: 'Wrong filename' },
    JWT_CREATION: { JWT_CREATION: 'Error while generating a JWT token' },
    USER_WRONG_PASSWORD: { USER_WRONG_PASSWORD: 'You\'ve entered a wrong password' },
    FORMAT_PICTURE: { FORMAT_PICTURE: 'Your picture has a wrong format' },
    FILE: data => ({ FILE: `An error occured while loading the file: ${data}` }),
    STREAM: error => ({ STREAM_ERROR: `An error occured while streaming: ${error}` }),
    SUBTITLES: error => ({ STREAM_ERROR: `An error occured while getting subs: ${error}` }),
  },
  SUCCESS: {
    DATA_MODIFIED: data => ({ DATA_MODIFIED: 'Succeed in modifying data', data }),
    DATA_UNCHANGED: data => ({ DATA_UNCHANGED: 'No change done!', data }),
    USER_LOGGED_IN: data => ({ USER_LOGGED_IN: 'User successfully logged in', data }),
    USER_DELETED: data => ({ USER_DELETED: 'User successfully deleted from the database', data }),
    MOVIE_DELETED: data => ({ MOVIE_DELETED: 'Movie successfully deleted from the database', data }),
    GET_USER: data => ({ GET_USER: 'Get user by id successful', data }),
    GET_ALL_USERS: data => ({ GET_ALL_USERS: 'Get all users from database successful', data }),
    NEW_USER_ADDED: data => ({ NEW_USER_ADDED: 'New user added to the database', data }),
    USER_ACTIVATED: data => ({ USER_ACTIVATED: 'User account successfully activated', data }),
    EMAIL_PASS_RECOVERY: data => ({ EMAIL_PASS_RECOVERY: 'A user asked for a new password', data }),
    PASSWORD_UPDATED: data => ({ PASSWORD_UPDATED: 'Password has been successfully updated', data }),
    GET_ALL_MOVIES: data => ({ GET_ALL_MOVIES: 'All available movies are listed below', data }),
    ADD_TORRENT: data => ({ ADD_TORRENT: 'Success in adding torrents', data }),
  },

  GENERAL: {
    NO_MODIFICATION: { NO_MODIFICATION: 'No modification done' },
  },
}

const BOUNDARY_VALUES = {
  EMAIL_MAX_LEN: 255,
  NAME_MIN_LEN: 2,
  NAME_MAX_LEN: 30,
  PASS_MIN_LEN: 6,
  AGE_MIN: 1,
  AGE_MAX: 99,
}

module.exports = {
  RESPONSES, BOUNDARY_VALUES,
}
